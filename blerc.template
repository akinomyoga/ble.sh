# -*- mode:sh -*-

## Here settings for ble.sh is given.
##
## An example of ~/.bashrc:
##
## ```bash
## if [[ $- == *i* ]]; then
##   "$HOME/.local/share/blesh/ble.sh" --noattach --rcfile ~/.blerc
## fi
## 
## # Your bashrc contents should come here
## 
## ((_ble_bash)) && ble-attach
## ```
##

# bleopt input_encoding=UTF-8
# bleopt pager=less
# bleopt vbell_default_message=' Wuff, -- Wuff!! ' vbell_duration=2000

# bleopt char_width_mode=east
# bleopt edit_abell=1
# bleopt edit_vbell=
# bleopt delete_selection_mode=1
# bleopt default_keymap=auto
# bleopt indent_offset=4
# bleopt indent_tabs=1
# bleopt tab_width=
# bleopt allow_exit_with_jobs=


## "emoji_width" specifies the width of emoji characters.  If an empty value is
## specified, special treatment of emoji is disabled.

#bleopt emoji_width=2


## "emoji_version" specifies the version of Unicode Emoji.  Available values
## are 1.0, 2.0, 3.0, 4.0, 5.0, 11.0, 12.0, 12.1, 13.0, and 13.1.

#bleopt emoji_version=13.1


##-----------------------------------------------------------------------------
## Settings for completion

# bleopt complete_polling_cycle=50
# bleopt complete_ambiguous=1
# bleopt complete_contract_function_names=1
# bleopt complete_auto_complete=1
# bleopt complete_auto_history=1
# bleopt complete_auto_delay=100
# bleopt complete_menu_style=align-nowrap
# bleopt complete_menu_align=20
# bleopt complete_menu_complete=1
# bleopt complete_menu_filter=1

##-----------------------------------------------------------------------------
## Color settings

## The setting "term_index_colors" specifies the number of index colors used to
## specify colors in the terminal.  The value "auto" means that the use of
## index colors are determined based on the terminfo database and the value of
## TERM shell variable.  Otherwise, the value is evaluated as an arithmetic
## expression.  When it is evaluated to 256, the index colors are assumed to be
## xterm 256-color palette (16 basic + 6x6x6 color cube + 24 gray scale).  When
## it is evaluated to 88, the index colors are assumed to be xterm 88-color
## palette (16 basic + 4x4x4 color cube + 8 gray scale).  When it is evaluated
## to 0, ble.sh will never use the index colors to set colors.  When it is
## evaluated to other integers, the value specifies the maximum available
## index.

#bleopt term_index_colors=256

# ble-color-setface syntax_default           none
# ble-color-setface syntax_command           fg=brown
# ble-color-setface syntax_quoted            fg=green
# ble-color-setface syntax_quotation         fg=green,bold
# ble-color-setface syntax_expr              fg=navy
# ble-color-setface syntax_error             bg=203,fg=231 # bg=224
# ble-color-setface syntax_varname           fg=202
# ble-color-setface syntax_delimiter         bold
# ble-color-setface syntax_param_expansion   fg=purple
# ble-color-setface syntax_history_expansion bg=94,fg=231
# ble-color-setface syntax_function_name     fg=92,bold # fg=purple
# ble-color-setface syntax_comment           fg=gray
# ble-color-setface syntax_glob              fg=198,bold
# ble-color-setface syntax_brace             fg=37,bold
# ble-color-setface syntax_tilde             fg=navy,bold
# ble-color-setface syntax_document          fg=94
# ble-color-setface syntax_document_begin    fg=94,bold

# ble-color-setface command_builtin_dot      fg=red,bold
# ble-color-setface command_builtin          fg=red
# ble-color-setface command_alias            fg=teal
# ble-color-setface command_function         fg=92 # fg=purple
# ble-color-setface command_file             fg=green
# ble-color-setface command_keyword          fg=blue
# ble-color-setface command_jobs             fg=red
# ble-color-setface command_directory        fg=navy,underline

# ble-color-setface filename_directory        underline,fg=26
# ble-color-setface filename_directory_sticky underline,fg=white,bg=26
# ble-color-setface filename_link             underline,fg=teal
# ble-color-setface filename_orphan           underline,fg=teal,bg=224
# ble-color-setface filename_setuid           underline,fg=black,bg=220
# ble-color-setface filename_setgid           underline,fg=black,bg=191
# ble-color-setface filename_executable       underline,fg=green
# ble-color-setface filename_other            underline
# ble-color-setface filename_socket           underline,fg=cyan,bg=black
# ble-color-setface filename_pipe             underline,fg=lime,bg=black
# ble-color-setface filename_character        underline,fg=white,bg=black
# ble-color-setface filename_block            underline,fg=yellow,bg=black
# ble-color-setface filename_warning          underline,fg=red
# ble-color-setface filename_ls_colors        underline

# bleopt filename_ls_colors="$LS_COLORS"


##-----------------------------------------------------------------------------
## Keybindings


## The default mapping of <SP> is magic-space which performs history and
## sabbrev expansion before inserting a space.  If you want to insert just a
## space without expansions as Bash's default, use the following setting:

#ble-bind -f 'SP' 'self-insert'


## If you want to search the already input string using <up> and <down> keys,
## use the following setting:

#ble-bind -f up 'history-search-backward'
#ble-bind -f down 'history-search-forward'


## If you want to immediately run the matched command by RET, you can specify
## the option "immediate-accept" to nsearch widgets:

#ble-bind -f up 'history-search-backward immediate-accept'
#ble-bind -f down 'history-search-forward immediate-accept'


## If you want to kill/copy words including the spaces preceding them, you can
## use the following keybindings:

#ble-bind -f C-w 'kill-region-or kill-uword'
#ble-bind -f M-w 'copy-region-or copy-uword'

##-----------------------------------------------------------------------------
## Settings for Emacs mode

ble/array#push _ble_keymap_emacs_load_hook blerc/emacs-load-hook
function blerc/emacs-load-hook {
  #----------------------------------------------------------------------------
  # Keybindings

  ## With the following setting, RET and C-m always causes the execution of the
  ## command even in the multiline mode or when the command is not
  ## syntactically completed.

  #ble-bind -f C-m 'accept-line'
  #ble-bind -f RET 'accept-line'


  ## With the following settings, M-backspace (whose actual key sequence
  ## depends on your terminal) will kill the backward word as in the default
  ## readline.

  #ble-bind -f 'M-C-?' kill-backward-cword
  #ble-bind -f 'M-DEL' kill-backward-cword
  #ble-bind -f 'M-C-h' kill-backward-cword
  #ble-bind -f 'M-BS'  kill-backward-cword

  return
}

##-----------------------------------------------------------------------------
## Settings for Vim mode

ble/array#push _ble_keymap_vi_load_hook blerc/vim-load-hook
function blerc/vim-load-hook {
  ((_ble_bash>=40300)) && bind 'set keyseq-timeout 1'

  # bleopt keymap_vi_macro_depth=64
  # bleopt keymap_vi_nmap_name:=$'\e[1m~\e[m'

  #----------------------------------------------------------------------------
  # Keybindings

  ## The following setting sets up the keymap settings with Meta modifiers.
  ## With this setting, M-RET can be used to insert a newline in the
  ## commandline.  In this case, C-RET can be optionally configured so that it
  ## forcibly executes the command.

  #ble-decode/keymap:vi_imap/define-meta-bindings
  #ble-bind -m vi_imap -f 'C-RET' 'accept-line'


  ## The default mapping of C-o is vi_imap/single-command-mode.  If you want to
  ## execute the current command line and load the next history entry with
  ## <C-o>, use the following setting:

  #ble-bind -m vi_imap -f 'C-o' 'accept-and-next'


  ## The default mapping of C-k is kill-forward-line.  If you want to input
  ## digraphs with <C-k>{char1}{char2}, use the following setting:

  #ble-bind -m vi_imap -f 'C-k' 'vi_imap/insert-digraph'


  ## The default mapping of <M-backspace> (whose actual key sequence depends on
  ## your terminal) copies the previous shell word in the kill ring.  Instead,
  ## the following settings will kill the backward word as in the default
  ## readline.

  #ble-bind -m vi_imap -f 'M-C-?' kill-backward-cword
  #ble-bind -m vi_imap -f 'M-DEL' kill-backward-cword
  #ble-bind -m vi_imap -f 'M-C-h' kill-backward-cword
  #ble-bind -m vi_imap -f 'M-BS'  kill-backward-cword


  ## The default mapping of C-c is vi_imap/normal-mode-without-insert-leave
  ## (imap), vi-command/cancel (nmap).  If you instead want to discard the
  ## current line and go to the next line, you can bind C-c to 'discard-line':

  #ble-bind -m vi_imap -f 'C-c' discard-line
  #ble-bind -m vi_nmap -f 'C-c' discard-line


  ## The default mapping of 'g g' and G moves the current position in the
  ## command history.  If you would like to move the cursor position in the
  ## current command entry, you can overwrite the bindings as follows.

  #ble-bind -m vi_nmap -f 'g g' vi-command/first-nol
  #ble-bind -m vi_omap -f 'g g' vi-command/first-nol
  #ble-bind -m vi_xmap -f 'g g' vi-command/first-nol
  #ble-bind -m vi_nmap -f 'G' vi-command/last-line
  #ble-bind -m vi_omap -f 'G' vi-command/last-line
  #ble-bind -m vi_xmap -f 'G' vi-command/last-line

  #----------------------------------------------------------------------------
  # Cursor shapes and other terminal settings

  ## Cursor settings

  # bleopt keymap_vi_nmap_cursor=2
  # bleopt keymap_vi_imap_cursor=5
  # bleopt keymap_vi_omap_cursor=4
  # bleopt keymap_vi_xmap_cursor=2
  # bleopt keymap_vi_cmap_cursor=0

  ## DECSCUSR setting
  ##
  ##   If you don't have the entry Ss in terminfo, yet your terminal supports
  ##   DECSCUSR, please comment out the following line to enable DECSCUSR.
  ##
  #_ble_term_Ss=$'\e[@1 q'

  ## Control sequences that will be output on entering each mode
  # bleopt term_vi_nmap=
  # bleopt term_vi_imap=
  # bleopt term_vi_omap=
  # bleopt term_vi_xmap=
  # bleopt term_vi_cmap=

  ## vim-surround
  # source "$_ble_base/lib/vim-surround.sh"
  # bleopt vim_surround_45:=$'$( \r )'
  # bleopt vim_surround_61:=$'$(( \r ))'

}
